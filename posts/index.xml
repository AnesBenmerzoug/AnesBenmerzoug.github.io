<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Personal Blog</title>
<link>https://AnesBenmerzoug.github.io/posts/</link>
<atom:link href="https://AnesBenmerzoug.github.io/posts/index.xml" rel="self" type="application/rss+xml"/>
<description>This is Anes Benmerzoug&#39;s personal Blog.</description>
<generator>quarto-1.5.56</generator>
<lastBuildDate>Tue, 28 Jul 2020 00:00:00 GMT</lastBuildDate>
<item>
  <title>When ECR lifecycle policies are not enough…</title>
  <dc:creator>Anes Benmerzoug</dc:creator>
  <link>https://AnesBenmerzoug.github.io/posts/when-ecr-lifecycle-policies-are-not-enough/</link>
  <description><![CDATA[ 




<p>In this second post we will talk about something a bit different from last time. we will be using a tool to extend and take full advantage of <a href="https://aws.amazon.com/ecr/">ECR</a> <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html">Lifecycle Policies</a> to prune more images than is possible with just lifecycle policies.</p>
<p>We will be using <a href="https://aws.amazon.com/">AWS</a>, a <a href="https://kubernetes.io/">Kubernetes</a> Cluster (self-hosted or <a href="https://aws.amazon.com/eks/">EKS</a>), as well as a <a href="https://en.wikipedia.org/wiki/Continuous_integration">Continuous Integration</a> system, or CI for short, to build and push images continously to ECR.</p>
<p>Let’s assume that we are continously building and pushing images to ECR after each push to the master branch. If we just keep doing that we will eventually hit <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/service-quotas.html">the maximum number of images in a given repository</a> and receive an error message for every subsequent push attempt.</p>
<p>In most cases, especially at the beginning of a project, there won’t be a problem because the maximum number of images per repository is quite high (the limit used to be 1000 <a href="https://aws.amazon.com/about-aws/whats-new/2019/07/amazon-ecr-now-supports-increased-repository-and-image-limits/">but was recently increased to 10000</a>).</p>
<p>For all other cases it is recommended to use ECR Lifecycle Policies to, at the very least, remove untagged images and prune very old images. But, once we start using them we quickly realize that the allowed rules are quite limited. For example we cannot currently remove all images with a certain tag prefix older than a certain number of days while keeping the last <strong>N</strong> even if they are too old.</p>
<p>Here are some examples of rules that cannot be created using them:</p>
<ul>
<li><p>Remove all images with a certain tag prefix that are older than a certain number of days while keeping the last <strong>N</strong> even if they are old:</p>
<p>This can happen if, for example, development stops on a certain project for some time i.e.&nbsp;no new images are being pushed but at the same time it is still deployed in production.</p></li>
<li><p>Keep all images in one repository that have a tag that already exists in a second repository:</p>
<p>This can happen if, for example, we have two different components i.e.&nbsp;two images that require the same version i.e.&nbsp;same tag to run properly.</p></li>
<li><p>Keep the last <strong>N</strong> images that were deployed to production and remove all other ones after some time:</p>
<p>This can happen if, for example, not all images that are pushed to ECR are used in production. It can because of errors in the <strong>Staging</strong> phase or security vulnerabilities, etc.</p></li>
</ul>
<p>In this post we will focus on solving the problem from the last example.</p>
<p>To do so we could either create our own service/tool to directly prune images and avoid using ECR Lifecycle Policies or we could complement it with a small service/tool that adds a given tag to certain images.</p>
<p>I went with the later and wrote a small service called <a href="https://github.com/AnesBenmerzoug/kube-ecr-tagger">kube-ecr-tagger</a> that runs inside the cluster and tags images for us.</p>
<p>Before presenting it, let’s have a look into ECR Lifecycle Policies a bit more in detail.</p>
<section id="ecr-lifecycle-policies" class="level2">
<h2 class="anchored" data-anchor-id="ecr-lifecycle-policies">ECR Lifecycle Policies</h2>
<p><a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html">ECR lifecycle policies</a> are a part of ECR that enables us to specify the lifecycle management of images in a repository. A lifecycle policy, such as the following, is a set of one or more rules, where each rule defines an action for ECR. The actions apply to images that contain tags prefixed with the given strings. This allows the automation of cleaning up unused images, for example expiring images based on age or count:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rules"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb1-3">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-4">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rulePriority"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-5">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Expire images older than 14 days"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-6">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"selection"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-7">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"tagStatus"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"untagged"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-8">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"countType"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sinceImagePushed"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-9">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"countUnit"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"days"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-10">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"countNumber"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span></span>
<span id="cb1-11">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb1-12">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"action"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-13">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"type"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"expire"</span></span>
<span id="cb1-14">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-15">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-16">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>The allowed rules and actions are limited. For example, you cannot do any of the following:</p>
<ul>
<li>Match the same image with multiple rules ( this could be used to add exceptions to a rule ). If a rule matches an image it cannot be matched by another rule with a lower priority</li>
<li>Expire images both by count and by age</li>
<li>Choose to keep images that match a rule instead of expiring them</li>
<li>Match images with an exact tag, only tag prefixes are allowed</li>
</ul>
<p>To avoid some of these limitations and to solve our problem from the previous section I developed a simple tool called <a href="https://github.com/AnesBenmerzoug/kube-ecr-tagger">kube-ecr-tagger</a>.</p>
</section>
<section id="kube-ecr-tagger" class="level2">
<h2 class="anchored" data-anchor-id="kube-ecr-tagger">kube-ecr-tagger</h2>
<p><a href="https://github.com/AnesBenmerzoug/kube-ecr-tagger">kube-ecr-tagger</a> runs inside the cluster and tags the used ECR images in a given namespace, or in all namespaces, with either a given tag or a tag created by appending a unix timestamp to the passed tag prefix.</p>
<p>If a tag is passed then there will only be one such tag in each repository. If a tag prefix is passed instead then there will be multiple tags in each repository with the same prefix.</p>
<p>Let’s use a concrete example. Let’s assume that we use semantic versioning to tag our images in CI and that we are currently at version 1.0.X and that not all images that are pushed will be used in production. Perhaps some of them will fail in the acceptance/staging phase or be flagged for security issues if image scanning is activated.</p>
<p>We want to keep the last 100 images that are deployed in production and at the same time remove images whose tag starts with ‘1.0’ and that are older than 30 days. For that we could the following lifecycle policy:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rules"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb2-3">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-4">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rulePriority"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-5">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Keep last 100 images with tag prefix 'production' "</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-6">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"selection"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-7">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"tagStatus"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tagged"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-8">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"tagPrefixList"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"production"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-9">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"countType"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imageCountMoreThan"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-10">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"countNumber"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb2-11">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb2-12">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"action"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"type"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"expire"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-13">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-14">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-15">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rulePriority"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-16">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Remove images with tag prefix '1.0' that are older than 30 days"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-17">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"selection"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-18">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"tagStatus"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tagged"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-19">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"tagPrefixList"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.0"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-20">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"countType"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sinceImagePushed"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-21">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"countNumber"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-22">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"countUnit"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"days"</span></span>
<span id="cb2-23">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb2-24">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"action"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"type"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"expire"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-25">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-26">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb2-27"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Then, in order to tag the images in production, which we assume for the sake of simplicity are deployed in the <strong>prod</strong> namespace, we will deploy kube-ecr-tagger as a Deployment in the <strong>kube-system</strong> namespace with the following example manifest:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> apps/v1</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Deployment</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kube-ecr-tagger</span></span>
<span id="cb3-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kube-system</span></span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">template</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">containers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">         </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kube-ecr-tagger</span></span>
<span id="cb3-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">           </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> anesbenmerzoug/kube-ecr-tagger:latest </span></span>
<span id="cb3-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">           </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">           </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kube-ecr-tagger</span></span>
<span id="cb3-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">           </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">           </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> --namespace=prod</span></span>
<span id="cb3-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">           </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> --tag-prefix=production</span></span></code></pre></div>
<p>We should not forget to add a service account, if we’re using IAM roles for service accounts, or the right annotation, if we’re using <a href="https://github.com/uswitch/kiam">kiam</a> or <a href="https://github.com/jtblin/kube2iam">kube2iam</a>, with the right IAM permissions:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2012-10-17"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Statement"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb4-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-5">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Effect"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Allow"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-6">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Action"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb4-7">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:GetAuthorizationToken"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-8">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:BatchCheckLayerAvailability"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-9">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:GetDownloadUrlForLayer"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-10">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:DescribeImages"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-11">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:BatchGetImage"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-12">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecr:PutImage"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-13">            <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-14">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Resource"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span></span>
<span id="cb4-15">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-16">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb4-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Example manifests can be found in the kube-ecr-tagger <a href="https://github.com/AnesBenmerzoug/kube-ecr-tagger">repository</a> under the <a href="https://github.com/AnesBenmerzoug/kube-ecr-tagger/tree/master/manifests">manifests</a> folder.</p>
<p>Once deployed, it will then check the ECR images of all deployed containers in the <strong>prod</strong> namespace and add tags with the prefix <strong>production</strong> to each image, if one does not exist already.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>We have seen in this post that by combining a small tool with ECR Lifecycle Policies we can achieve more complicated rules than with plain lifecycle policies.</p>
<p>Of course, <a href="https://github.com/AnesBenmerzoug/kube-ecr-tagger">kube-ecr-tagger</a> is limited in what it can do but one can already have an idea of what can be achieved.</p>
<p>If you want to try kube-ecr-tagger you can simply use the built container images from <a href="https://hub.docker.com/r/anesbenmerzoug/kube-ecr-tagger">this repository</a> on Dockerhub.</p>
<p>I hope that you have learned at a thing or two from this post. If there are any mistakes or if you have questions please do not hesitate to reach out to me.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section></div> ]]></description>
  <guid>https://AnesBenmerzoug.github.io/posts/when-ecr-lifecycle-policies-are-not-enough/</guid>
  <pubDate>Tue, 28 Jul 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Model Versioning with MLflow</title>
  <dc:creator>Anes Benmerzoug</dc:creator>
  <link>https://AnesBenmerzoug.github.io/posts/model-versioning-with-mlflow/</link>
  <description><![CDATA[ 




<p>In this very first post we will talk about machine learning model versioning and more specifically machine learning classifier versioning.</p>
<p>Of course, one could simply compare accuracies ( or whichever metric you’re using ) on a separate test set and promote whichever classifier has a better value but that does not offer us the same guarantees as statistical tests.</p>
<p>For example, one may train two different classifiers on the same dataset and get the following results on a separate test set:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>True Label</th>
<th>Model 1 Prediction</th>
<th>Model 2 Prediction</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>A</td>
<td>A</td>
<td>B</td>
</tr>
<tr class="even">
<td>A</td>
<td>A</td>
<td>A</td>
</tr>
<tr class="odd">
<td>B</td>
<td>A</td>
<td>A</td>
</tr>
<tr class="even">
<td>A</td>
<td>A</td>
<td>B</td>
</tr>
<tr class="odd">
<td>A</td>
<td>B</td>
<td>B</td>
</tr>
<tr class="even">
<td>B</td>
<td>B</td>
<td>A</td>
</tr>
<tr class="odd">
<td>B</td>
<td>B</td>
<td>B</td>
</tr>
<tr class="even">
<td>B</td>
<td>A</td>
<td>B</td>
</tr>
<tr class="odd">
<td>A</td>
<td>A</td>
<td>A</td>
</tr>
<tr class="even">
<td>A</td>
<td>B</td>
<td>A</td>
</tr>
</tbody>
</table>
<p>We can see that the first classifier has an accuracy of 60% and the second classifier an accuracy of 50%. If we were to stop here we would just say that the first classifier is better than the second one and that could be true, but can this result be trusted?</p>
<p>To verify that we construct the following <a href="https://en.wikipedia.org/wiki/Confusion_matrix">confusion matrix</a>:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th></th>
<th>Model 2 Correct</th>
<th>Model 2 Wrong</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Model 1 Correct</td>
<td>3</td>
<td>3</td>
</tr>
<tr class="even">
<td>Model 1 Wrong</td>
<td>2</td>
<td>2</td>
</tr>
</tbody>
</table>
<p>By comparing the off-diagonal elements, we can intuitively know that there isn’t much of a difference between the two classifiers. To make that more precise we can use statistical tests instead of just comparing numbers.</p>
<p>One such test is <a href="https://en.wikipedia.org/wiki/McNemar%27s_test">McNemar’s Test</a>.</p>
<p>Before explaining McNemar’s Test and the different steps used to compare two machine learning classifiers, let’s first talk about <a href="https://mlflow.org/">MLflow</a>.</p>
<section id="mlflow" class="level2">
<h2 class="anchored" data-anchor-id="mlflow">MLFlow</h2>
<p><a href="https://mlflow.org/">MLflow</a> is an open source platform for the machine learning life-cycle. It is currently composed of four components:</p>
<ul>
<li><a href="https://www.mlflow.org/docs/latest/tracking.html">MLflow Tracking</a>: Used to record and query experiments: code, data, config, and results</li>
<li><a href="https://www.mlflow.org/docs/latest/projects.html">MLflow Projects</a>: Used to package data science code in a format to reproduce runs on any platform</li>
<li><a href="https://www.mlflow.org/docs/latest/models.html">MLflow Models</a>: Used to deploy machine learning models in diverse serving environments</li>
<li><a href="https://www.mlflow.org/docs/latest/model-registry.html">MLflow Model Registry</a>: Used to store, annotate, discover, and manage models in a central repository</li>
</ul>
<p>It uses a classic client server architecture as depicted in the following diagram:</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart TD
    subgraph MLflow
        database[(Database)] &lt;--&gt; server(Server)
        storage[(Storage)] &lt;--&gt; server
    end

    server &lt;--&gt; client(Client)
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>The Client, user, interacts directly with the Server and the Server in turn interacts with the Database (MySQL, MSSQL, SQLITE, or POSTGRESQL) and the Storage backend (Local or Cloud).</p>
<p>In this post we’re only interested in the last component: the <a href="https://www.mlflow.org/docs/latest/model-registry.html"><strong>Model Registry</strong></a>.</p>
<p>It is a centralized model store, set of APIs, and UI, to collaboratively manage the full life-cycle of an MLflow Model. It provides model lineage (which MLflow experiment and run produced the model), model versioning, stage transitions (such as from staging to production), and annotations.</p>
<p>A registered model can be in any one of the following stages: - <strong>None</strong> - <strong>Staging</strong> - <strong>Production</strong> - <strong>Archived</strong></p>
<p>As can be seen in the following flowchart, a model starts, when first logged or registered, in the <strong>None</strong> stage and then transitions to the <strong>Staging</strong> stage, then to the <strong>Production</strong> stage and finally end its life-cycle in the <strong>Archived</strong> stage.</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart LR
    none(None)
    staging(Staging)
    production(Production)
    archived(Archived)

    none --&gt; staging
    staging --&gt; production
    production --&gt; archived
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>For simplicity’s sake we won’t consider other possible transitions (e.g.&nbsp;<strong>Staging</strong> -&gt; <strong>Archived</strong>).</p>
<p>What the Model Registry does not take care of is automatically transition a given model to the appropriate stage and that is understandable because the conditions needed to do that depend on the actual application.</p>
</section>
<section id="mcnemars-test" class="level2">
<h2 class="anchored" data-anchor-id="mcnemars-test">McNemar’s test</h2>
<p>McNemar’s test is a non-parametric statistical test that can be used to compare two classification models by constructing a 2x2 contingency table, or confusion matrix, like the following:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th></th>
<th>Model 2 Correct</th>
<th>Model 2 Wrong</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Model 1 Correct</td>
<td>a</td>
<td>b</td>
</tr>
<tr class="even">
<td>Model 1 Wrong</td>
<td>c</td>
<td>d</td>
</tr>
</tbody>
</table>
<p>In order to test if there is a significant difference between the two models, we use only the off-diagonal elements, b and c, since the other elements tell us nothing about whether one model is better than the other or not.</p>
<p>McNemar’s test statistic is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AQ%20=%20%5Cfrac%7B(b%20-%20c)%7D%7Bb%20+%20c%7D%0A"></p>
<p>Which, for large values of b and c, follows a chi-squared distribution with 1 degree of freedom <img src="https://latex.codecogs.com/png.latex?%5Cchi_%7B1%7D%5E%7B2%7D">.</p>
<p>To more closely approximate the chi-squared distribution we can use the following definition instead which contains a continuity correction:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AQ%20=%20%5Cfrac%7B(%7Cb%20-%20c%7C%20-%201)%7D%7Bb%20+%20c%7D%0A"></p>
<p>If the result is significant, i.e.&nbsp;greater than a pre-defined significance level, usually set to 0.05 but can be changed depending on the use case, then we can conclude that the two models are significantly different from each other.</p>
<p>But it does not end there, we still have to determine which one of the two is better than the other one. For that, we can use one or a combination of the usual metrics: Accuracy, F-Score, False Positive Rate, etc.</p>
<p>If we apply the continuity corrected version of the test on our previous example we get as result <em>1.0</em> and can confidently say that there is no significant difference between the two classifiers.</p>
</section>
<section id="model-versioning-flow" class="level2">
<h2 class="anchored" data-anchor-id="model-versioning-flow">Model Versioning Flow</h2>
<p>Now that we have defined and explained all the required parts of the flow. We can assemble them into the following chart that shows the different steps taken to compare two different classification models:</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD
    End--&gt;title["Model Versioning Flow Chart"]
    style title fill:#FFF,stroke:#FFF
    linkStyle 0 stroke:#FFF,stroke-width:0;
    Start((Start)) --&gt; A
    A(McNemar's Test) --&gt; B{"P-value &lt; &amp;alpha;"}
    B --&gt;|No| End((End))
    B --&gt;|Yes| C(Compute&lt;br&gt;Accuracies)
    C --&gt; D{Model1 Accuracy&lt;br&gt;&lt;&lt;br&gt;Model2 Accuracy}
    D --&gt;|No| End
    D --&gt;|Yes| E(Deploy Model2)
    E --&gt; End
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>Here we use accuracy, but it could be replaced by other metrics such as False Positive Rate, False Negative Rate, etc.</p>
</section>
<section id="example" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="example">Example</h2>
<p>In <a href="https://github.com/AnesBenmerzoug/mlflow_model_versioning">this repository</a> you can find example code in Python that shows how to use the previous flow to do model versioning for machine learning classifiers with MLflow.</p>
<p>One important thing that should always be done is to pin the random seed to ensure the experiment’s repeatability.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">random_seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span></span>
<span id="cb1-2">np.random.seed(random_seed)</span></code></pre></div>
<p>In the example, we start off by generating artificial classification data using scikit-learn’s <a href="https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_classification.html">make_classification</a> helper function and then splitting it into a training and a testing set:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">X, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_classification(</span>
<span id="cb2-2">        n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>,</span>
<span id="cb2-3">        n_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb2-4">        n_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,</span>
<span id="cb2-5">        n_informative<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,</span>
<span id="cb2-6">        random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>random_seed,</span>
<span id="cb2-7">)</span>
<span id="cb2-8">X_train, X_test, y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(</span>
<span id="cb2-9">    X, y, train_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span></span>
<span id="cb2-10">)</span></code></pre></div>
<p>After that, we fit a Logistic Regression classifier, then register and log it into MLflow and finally move it to the <strong>Production</strong> phase:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> mlflow.start_run():</span>
<span id="cb3-2">    lr_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LogisticRegression()</span>
<span id="cb3-3">    lr_model.fit(X_train, y_train)</span>
<span id="cb3-4">    y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lr_model.predict(X_test)</span>
<span id="cb3-5">    accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, y_pred)</span>
<span id="cb3-6">    mlflow.log_metric(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"accuracy"</span>, accuracy)</span>
<span id="cb3-7">    mlflow.sklearn.log_model(</span>
<span id="cb3-8">        lr_model, artifact_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model"</span>, registered_model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Logistic Regression"</span></span>
<span id="cb3-9">    )</span>
<span id="cb3-10"></span>
<span id="cb3-11">mlflow_client.transition_model_version_stage(</span>
<span id="cb3-12">    name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Logistic Regression"</span>, version<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, stage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Production"</span></span>
<span id="cb3-13">)</span></code></pre></div>
<p>Then, we fit a Random Forest classifier, then register and log it into MLflow and finally move it to the <strong>Staging</strong> phase:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> mlflow.start_run():</span>
<span id="cb4-2">    rf_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomForestClassifier()</span>
<span id="cb4-3">    rf_model.fit(X_train, y_train)</span>
<span id="cb4-4">    y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rf_model.predict(X_test)</span>
<span id="cb4-5">    accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, y_pred)</span>
<span id="cb4-6">    mlflow.log_metric(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"accuracy"</span>, accuracy)</span>
<span id="cb4-7">    mlflow.sklearn.log_model(</span>
<span id="cb4-8">        rf_model, artifact_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model"</span>, registered_model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Forest"</span></span>
<span id="cb4-9">    )</span>
<span id="cb4-10"></span>
<span id="cb4-11">mlflow_client.transition_model_version_stage(</span>
<span id="cb4-12">    name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Forest"</span>, version<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, stage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Staging"</span></span>
<span id="cb4-13">)</span></code></pre></div>
<p>To simulate the fact that the model comparison may happen in another script we delete both trained model instances and load them back from MLflow:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> lr_model</span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> rf_model</span>
<span id="cb5-3"></span>
<span id="cb5-4">lr_model_download_uri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mlflow_client.get_model_version_download_uri(</span>
<span id="cb5-5">    name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Logistic Regression"</span>, version<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb5-6">)</span>
<span id="cb5-7">rf_model_download_uri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mlflow_client.get_model_version_download_uri(</span>
<span id="cb5-8">    name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Forest"</span>, version<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb5-9">)</span>
<span id="cb5-10">lr_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mlflow.sklearn.load_model(lr_model_download_uri)</span>
<span id="cb5-11">rf_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mlflow.sklearn.load_model(rf_model_download_uri)</span></code></pre></div>
<p>As a next step, we use both models to generate predictions on the test set. We use these predictions to compute each model’s accuracy and to create a contingency table that is finally used in a corrected version of McNemar’s Test to return a P-value:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">y_pred_lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lr_model.predict(X_test)</span>
<span id="cb6-2">y_pred_rf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rf_model.predict(X_test)</span>
<span id="cb6-3"></span>
<span id="cb6-4">accuracy_lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, y_pred_lr)</span>
<span id="cb6-5">accuracy_rf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, y_pred_rf)</span>
<span id="cb6-6"></span>
<span id="cb6-7">contingency_table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mcnemar_table(y_test, y_pred_lr, y_pred_rf)</span>
<span id="cb6-8">_, p_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mcnemar(contingency_table, corrected<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<p>Finally we use the obtained P-value and the accuracies to decide whether we should deploy the Random Forest classifier to Production and archive the Logistic Regression classifier or not:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> p_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> significance <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> accuracy_lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> accuracy_rf:</span>
<span id="cb7-2">    mlflow_client.transition_model_version_stage(</span>
<span id="cb7-3">        name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Logistic Regression"</span>, version<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, stage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archived"</span>,</span>
<span id="cb7-4">    )</span>
<span id="cb7-5">    mlflow_client.transition_model_version_stage(</span>
<span id="cb7-6">        name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Forest"</span>, version<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, stage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Production"</span>,</span>
<span id="cb7-7">    )</span></code></pre></div>
<p>We can then access the MLflow server’s dashboard and see that the Random Forest classifier’s version 1 is in Production and the Logistic Regression classifier’s version 1 was archived:</p>
<div class="page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://AnesBenmerzoug.github.io/posts/model-versioning-with-mlflow/mlflow_model_versioning_screenshot.png" class="img-fluid figure-img column-screen"></p>
<figcaption>MLflow Model Versioning Screenshot</figcaption>
</figure>
</div>
</div>
<p>All that’s left now is to run this or similar code either on a schedule or as part of a training workflow each time a new classifier is trained and logged.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>We have seen that thanks to the Model Registry component of MLflow we can have a pretty simple automated model versioning flow for classifiers. This flow can be and should be extended and made more complete, depending on the use case. For example, by using a second metric for when a tie happens in the first one.</p>
<p>I hope that you have learned at a thing or two from this post. If there are any mistakes or if you have questions please do not hesitate to reach out to me.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section></div> ]]></description>
  <guid>https://AnesBenmerzoug.github.io/posts/model-versioning-with-mlflow/</guid>
  <pubDate>Wed, 08 Jul 2020 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
